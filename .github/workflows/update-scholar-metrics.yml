name: Update Scholar Metrics

on:
  # Run weekly on Sunday at 00:00 UTC
  schedule:
    - cron: '0 0 * * 0'
  
  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: 'false'
  
  # Also run on push to main branch (for testing)
  push:
    branches:
      - main
    paths:
      - 'scripts/fetch_scholar_metrics.py'
      - '.github/workflows/update-scholar-metrics.yml'

jobs:
  update-metrics:
    runs-on: ubuntu-latest
    
    # Set timeout to prevent hanging
    timeout-minutes: 10
    
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Use default GITHUB_TOKEN for authentication
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          echo "‚úÖ Dependencies installed"
      
      # Run the metrics fetcher script
      - name: Fetch Scholar metrics
        id: fetch_metrics
        run: |
          echo "üìä Fetching Google Scholar metrics..."
          cd scripts
          python fetch_scholar_metrics.py
          
          # Check if files were created
          if [ -f "../scholar_metrics.js" ] && [ -f "../scholar_metrics.json" ]; then
            echo "‚úÖ Metrics files generated successfully"
            echo "metrics_updated=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Metrics files not found"
            echo "metrics_updated=false" >> $GITHUB_OUTPUT
          fi
      
      # Display metrics (for logging)
      - name: Display metrics
        if: steps.fetch_metrics.outputs.metrics_updated == 'true'
        run: |
          echo "üìã Metrics content:"
          cat scholar_metrics.json | python -m json.tool
      
      # Check for changes
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet scholar_metrics.js scholar_metrics.json; then
            echo "No changes in metrics"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Metrics have changed"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      # Commit and push changes
      - name: Commit changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          
          # Add changed files
          git add scholar_metrics.js scholar_metrics.json
          
          # Create commit with timestamp
          TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
          git commit -m "üîÑ Update scholar metrics - ${TIMESTAMP}" \
                     -m "Automated update of Google Scholar metrics" \
                     -m "Source: GitHub Actions workflow"
          
          # Push changes
          git push
          
          echo "‚úÖ Changes committed and pushed"
      
      # Send notification on failure (optional)
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Workflow failed. Check the logs for details."
          # You could add Slack/Discord/Email notification here

  # Validate that the website still works after update
  validate-site:
    needs: update-metrics
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main  # Get the latest version with updates
      
      - name: Validate HTML
        run: |
          # Check that scholar_metrics.js exists
          if [ -f "scholar_metrics.js" ]; then
            echo "‚úÖ scholar_metrics.js found"
          else
            echo "‚ùå scholar_metrics.js not found"
            exit 1
          fi
          
          # Check that the script tag is in HTML
          if grep -q "scholar_metrics.js" index.html; then
            echo "‚úÖ Script tag found in HTML"
          else
            echo "‚ö†Ô∏è Script tag not found in HTML - please add:"
            echo '<script src="scholar_metrics.js"></script>'
          fi
      
      - name: Check deployment
        run: |
          echo "üåê Your site will be updated at:"
          echo "   https://YOUR_GITHUB_USERNAME.github.io/YOUR_REPO_NAME/"
          echo "   Note: It may take a few minutes for changes to appear"